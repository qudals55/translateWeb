html
  head
    meta(charset='utf-8')
    style
      include main.css  
body
block content
  div(class = "container-table100")
    div(class = "wrap-table100")
      h1(style = "color : white") Chat room list
      br
      div.room-list
        each room, idx in rooms
          if idx%3 == 0
            label(href = "#layer2" for = room.title).room-btn
              input(type="checkbox" id = room.title, style = "display : none").openBtn
              div.dim-layer
                div.dimBg
                div.pop-layer.fadeInDown
                  div.pop-container
                    div.pop-conts
                      // contents
                      div(class = "content-header")
                        p(class = "header-text")=room.title 
                      div(class = "content-body")
                        p(class = "owner-name", style = "text-align : left; font-size : 14px") 방장
                        p(class = "owner-name")=room.owner
                        p(class = "max-count", style = "text-align : left; font-size : 14px") 최대 인원
                        p(class = "max-count")=room.max + "명"
                        -var password = room.password ? 'true' : 'false'
                      input(class = "list-Btn", id = room._id, type = "checkbox", style = "display : none")
                      label(class = "list-Btn" for = room._id style = "text-align : left; font-size : 14px").max-count 현재 참가자
                      ul(class = "user-list")
                      for user in rooms[idx+1]
                        li(style = "text-align : center").max-count= user.id + " : " + user.lang
                      div.max-count= rooms[idx+2] + "명"
                      div.btn-r
                        button(data-password=password data-id=room._id).join-btn Enter
                        
              div.room-conts
                div.room-title
                  div.room-name= room.title
                div.room-body
                  div.room-max= room.max
                  div.room-pri(isPrivate = room.password)= room.password ? 'Private Room' : 'Public Room'
          
          
      p If you want to make room, Click bottom button!
        br
        a(href='/room')
          button Make Room!
.error-message= error
script(src='/socket.io/socket.io.js')
script.
  var socket = io.connect('https://localhost:443/room', {
    transports: [ 'websocket']
  });
  socket.on('newRoom', function (data) {
    var tr = document.createElement('tr');
    var td = document.createElement('td');
    td.textContent = data.title;
    tr.appendChild(td);
    td = document.createElement('td');
    td.textContent = data.password ? 'Private Room' : 'Public Room';
    tr.appendChild(td);
    td = document.createElement('td');
    td.textContent = data.max;
    tr.appendChild(td);
    td = document.createElement('td');
    td[0].style.color = data.owner;
    td.textContent = data.owner;
    tr.appendChild(td);
    td = document.createElement('td');
    var button = document.createElement('button');
    button.textContent = 'Enter';
    button.dataset.password = data.password ? 'true' : 'false';
    button.dataset.id = data._id;
    button.addEventListener('click', addBtnEvent);
    td.appendChild(button);
    tr.appendChild(td);
    tr.dataset.id = data._id;
    document.querySelector('table tbody').appendChild(tr);
  });
  socket.on('removeRoom', function (data) {
    document.querySelectorAll('tbody tr').forEach(function (tr) {
      if (tr.dataset.id === data) {
        tr.parentNode.removeChild(tr);
      }
    });
  });
  function addBtnEvent(e) {
    if (e.target.dataset.password === 'true') {
      const password = prompt('Input Password');
      location.href = '/room/' + e.target.dataset.id + '?password=' + password;
    } else {
      location.href = '/room/' + e.target.dataset.id;
    }
  }
  document.querySelectorAll('.join-btn').forEach(function (btn) {
    btn.addEventListener('click', addBtnEvent);
  });
body